public class analyzer.TestHelper extends soot.SceneTransformer
{
    private static final org.slf4j.Logger LOG;
    public static final analyzer.phase.PhaseInfo PHASE_INFO;
    java.util.Map bodyMap;

    public void <init>()
    {
        analyzer.TestHelper this;
        java.util.HashMap $stack1;

        this := @this: analyzer.TestHelper;

        specialinvoke this.<soot.SceneTransformer: void <init>()>();

        $stack1 = new java.util.HashMap;

        specialinvoke $stack1.<java.util.HashMap: void <init>()>();

        this.<analyzer.TestHelper: java.util.Map bodyMap> = $stack1;

        return;
    }

    protected void internalTransform(java.lang.String, java.util.Map)
    {
        analyzer.TestHelper this;
        java.lang.String phaseName, $stack14, $stack20, $stack22, $stack28, $stack34, $stack35;
        java.util.Map options, $stack27;
        java.util.Iterator l3, l6;
        soot.SootClass c;
        soot.SootMethod m;
        org.slf4j.Logger $stack8, $stack18;
        soot.Scene $stack9;
        soot.util.Chain $stack10;
        boolean $stack12, $stack15, $stack26, $stack31;
        java.lang.Object $stack13, $stack30;
        java.lang.StringBuilder $stack17, $stack19, $stack21;
        java.util.HashMap $stack23;
        java.util.List $stack24;
        java.io.PrintStream $stack33;
        soot.Body $stack36;

        this := @this: analyzer.TestHelper;

        phaseName := @parameter0: java.lang.String;

        options := @parameter1: java.util.Map;

        $stack8 = <analyzer.TestHelper: org.slf4j.Logger LOG>;

        interfaceinvoke $stack8.<org.slf4j.Logger: void info(java.lang.String)>("TestHelper running...");

        $stack9 = staticinvoke <soot.Scene: soot.Scene v()>();

        $stack10 = virtualinvoke $stack9.<soot.Scene: soot.util.Chain getApplicationClasses()>();

        l3 = interfaceinvoke $stack10.<soot.util.Chain: java.util.Iterator iterator()>();

     label1:
        $stack12 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack12 == 0 goto label6;

        $stack13 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        c = (soot.SootClass) $stack13;

        $stack14 = virtualinvoke c.<soot.SootClass: java.lang.String getName()>();

        $stack15 = virtualinvoke $stack14.<java.lang.String: boolean startsWith(java.lang.String)>("analyzer.cases.");

        if $stack15 == 0 goto label5;

        $stack18 = <analyzer.TestHelper: org.slf4j.Logger LOG>;

        $stack17 = new java.lang.StringBuilder;

        specialinvoke $stack17.<java.lang.StringBuilder: void <init>()>();

        $stack19 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recording method body of test case ");

        $stack20 = virtualinvoke c.<soot.SootClass: java.lang.String getName()>();

        $stack21 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack20);

        $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack18.<org.slf4j.Logger: void info(java.lang.String)>($stack22);

        $stack23 = new java.util.HashMap;

        specialinvoke $stack23.<java.util.HashMap: void <init>()>();

        $stack24 = virtualinvoke c.<soot.SootClass: java.util.List getMethods()>();

        l6 = interfaceinvoke $stack24.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $stack26 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>();

        if $stack26 == 0 goto label4;

        $stack30 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>();

        m = (soot.SootMethod) $stack30;

        $stack31 = virtualinvoke m.<soot.SootMethod: boolean hasActiveBody()>();

        if $stack31 == 0 goto label3;

        $stack33 = <java.lang.System: java.io.PrintStream out>;

        $stack34 = virtualinvoke m.<soot.SootMethod: java.lang.String getSubSignature()>();

        virtualinvoke $stack33.<java.io.PrintStream: void println(java.lang.String)>($stack34);

        $stack35 = virtualinvoke m.<soot.SootMethod: java.lang.String getSubSignature()>();

        $stack36 = virtualinvoke m.<soot.SootMethod: soot.Body retrieveActiveBody()>();

        interfaceinvoke $stack23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack35, $stack36);

     label3:
        goto label2;

     label4:
        $stack27 = this.<analyzer.TestHelper: java.util.Map bodyMap>;

        $stack28 = virtualinvoke c.<soot.SootClass: java.lang.String getName()>();

        interfaceinvoke $stack27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack28, $stack23);

     label5:
        goto label1;

     label6:
        return;
    }

    public soot.Body getBody(java.lang.String, java.lang.String)
    {
        analyzer.TestHelper this;
        java.lang.String className, methodSubsig, $stack12;
        java.util.Map map, $stack4, $stack13;
        boolean $stack5, $stack15;
        java.lang.StringBuilder $stack6, $stack8, $stack9, $stack10, $stack11;
        org.slf4j.Logger $stack7;
        java.lang.Object $stack14, $stack21;
        soot.Body $stack22;

        this := @this: analyzer.TestHelper;

        className := @parameter0: java.lang.String;

        methodSubsig := @parameter1: java.lang.String;

        $stack4 = this.<analyzer.TestHelper: java.util.Map bodyMap>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: boolean containsKey(java.lang.Object)>(className);

        if $stack5 == 0 goto label1;

        $stack13 = this.<analyzer.TestHelper: java.util.Map bodyMap>;

        $stack14 = interfaceinvoke $stack13.<java.util.Map: java.lang.Object get(java.lang.Object)>(className);

        map = (java.util.Map) $stack14;

        $stack15 = interfaceinvoke map.<java.util.Map: boolean containsKey(java.lang.Object)>(methodSubsig);

        if $stack15 == 0 goto label1;

        $stack21 = interfaceinvoke map.<java.util.Map: java.lang.Object get(java.lang.Object)>(methodSubsig);

        $stack22 = (soot.Body) $stack21;

        return $stack22;

     label1:
        $stack7 = <analyzer.TestHelper: org.slf4j.Logger LOG>;

        $stack6 = new java.lang.StringBuilder;

        specialinvoke $stack6.<java.lang.StringBuilder: void <init>()>();

        $stack8 = virtualinvoke $stack6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find method \'");

        $stack9 = virtualinvoke $stack8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(methodSubsig);

        $stack10 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in class ");

        $stack11 = virtualinvoke $stack10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(className);

        $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $stack7.<org.slf4j.Logger: void error(java.lang.String)>($stack12);

        return null;
    }

    public soot.SootClass loadSootClassMethods(java.lang.String)
    {
        analyzer.TestHelper this;
        java.lang.String className, $stack15;
        soot.SootClass 'cls';
        java.util.Iterator l3;
        soot.SootMethod method;
        soot.Body methodBody;
        soot.Scene $stack6;
        java.util.List $stack8;
        boolean $stack10, $stack12, $stack14;
        java.lang.Object $stack11;

        this := @this: analyzer.TestHelper;

        className := @parameter0: java.lang.String;

        $stack6 = staticinvoke <soot.Scene: soot.Scene v()>();

        'cls' = virtualinvoke $stack6.<soot.Scene: soot.SootClass loadClassAndSupport(java.lang.String)>(className);

        $stack8 = virtualinvoke 'cls'.<soot.SootClass: java.util.List getMethods()>();

        l3 = interfaceinvoke $stack8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $stack10 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack10 == 0 goto label3;

        $stack11 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        method = (soot.SootMethod) $stack11;

        $stack12 = virtualinvoke method.<soot.SootMethod: boolean hasActiveBody()>();

        if $stack12 != 0 goto label2;

        $stack14 = virtualinvoke 'cls'.<soot.SootClass: boolean isInterface()>();

        if $stack14 != 0 goto label2;

        $stack15 = virtualinvoke method.<soot.SootMethod: java.lang.String getSubSignature()>();

        methodBody = virtualinvoke this.<analyzer.TestHelper: soot.Body getBody(java.lang.String,java.lang.String)>(className, $stack15);

        virtualinvoke method.<soot.SootMethod: void setActiveBody(soot.Body)>(methodBody);

     label2:
        goto label1;

     label3:
        return 'cls';
    }

    static void <clinit>()
    {
        org.slf4j.Logger $stack0;
        analyzer.phase.PhaseInfo $stack1;

        $stack0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lanalyzer/TestHelper;");

        <analyzer.TestHelper: org.slf4j.Logger LOG> = $stack0;

        $stack1 = new analyzer.phase.PhaseInfo;

        specialinvoke $stack1.<analyzer.phase.PhaseInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>("wjtp", "testhelper", "Store body info for later analyses", 1, 0);

        <analyzer.TestHelper: analyzer.phase.PhaseInfo PHASE_INFO> = $stack1;

        return;
    }
}
