class analyzer.analysis.GlobalCallGraphAnalysisTest extends analyzer.AnalyzerTestBase
{

    void <init>()
    {
        analyzer.analysis.GlobalCallGraphAnalysisTest this;

        this := @this: analyzer.analysis.GlobalCallGraphAnalysisTest;

        specialinvoke this.<analyzer.AnalyzerTestBase: void <init>()>();

        return;
    }

    void testMakingIndex()
    {
        analyzer.analysis.GlobalCallGraphAnalysisTest this;
        java.util.Iterator l1, l3, l5;
        soot.SootClass sootClass;
        soot.SootMethod sootMethod, $stack39;
        soot.Unit unit;
        index.ProgramLocation loc;
        java.util.Map $stack8, $stack13, $stack15, $stack21, $stack23, $stack25, $stack31, $stack33, $stack35;
        java.util.Set $stack9, $stack16, $stack26;
        boolean $stack11, $stack18, $stack28;
        java.lang.Object $stack12, $stack14, $stack20, $stack22, $stack24, $stack30, $stack32, $stack34, $stack36;
        java.lang.StringBuilder $stack37, $stack41, $stack42, $stack44, $stack45, $stack47;
        java.io.PrintStream $stack38;
        java.lang.String $stack40, $stack48;
        int $stack43, $stack46;

        this := @this: analyzer.analysis.GlobalCallGraphAnalysisTest;

        $stack8 = <analyzer.analysis.GlobalCallGraphAnalysisTest: java.util.Map index>;

        $stack9 = interfaceinvoke $stack8.<java.util.Map: java.util.Set keySet()>();

        l1 = interfaceinvoke $stack9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $stack11 = interfaceinvoke l1.<java.util.Iterator: boolean hasNext()>();

        if $stack11 == 0 goto label6;

        $stack12 = interfaceinvoke l1.<java.util.Iterator: java.lang.Object next()>();

        sootClass = (soot.SootClass) $stack12;

        $stack13 = <analyzer.analysis.GlobalCallGraphAnalysisTest: java.util.Map index>;

        $stack14 = interfaceinvoke $stack13.<java.util.Map: java.lang.Object get(java.lang.Object)>(sootClass);

        $stack15 = (java.util.Map) $stack14;

        $stack16 = interfaceinvoke $stack15.<java.util.Map: java.util.Set keySet()>();

        l3 = interfaceinvoke $stack16.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $stack18 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>();

        if $stack18 == 0 goto label5;

        $stack20 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>();

        sootMethod = (soot.SootMethod) $stack20;

        $stack21 = <analyzer.analysis.GlobalCallGraphAnalysisTest: java.util.Map index>;

        $stack22 = interfaceinvoke $stack21.<java.util.Map: java.lang.Object get(java.lang.Object)>(sootClass);

        $stack23 = (java.util.Map) $stack22;

        $stack24 = interfaceinvoke $stack23.<java.util.Map: java.lang.Object get(java.lang.Object)>(sootMethod);

        $stack25 = (java.util.Map) $stack24;

        $stack26 = interfaceinvoke $stack25.<java.util.Map: java.util.Set keySet()>();

        l5 = interfaceinvoke $stack26.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $stack28 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack28 == 0 goto label4;

        $stack30 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        unit = (soot.Unit) $stack30;

        $stack31 = <analyzer.analysis.GlobalCallGraphAnalysisTest: java.util.Map index>;

        $stack32 = interfaceinvoke $stack31.<java.util.Map: java.lang.Object get(java.lang.Object)>(sootClass);

        $stack33 = (java.util.Map) $stack32;

        $stack34 = interfaceinvoke $stack33.<java.util.Map: java.lang.Object get(java.lang.Object)>(sootMethod);

        $stack35 = (java.util.Map) $stack34;

        $stack36 = interfaceinvoke $stack35.<java.util.Map: java.lang.Object get(java.lang.Object)>(unit);

        loc = (index.ProgramLocation) $stack36;

        $stack38 = <java.lang.System: java.io.PrintStream out>;

        $stack37 = new java.lang.StringBuilder;

        specialinvoke $stack37.<java.lang.StringBuilder: void <init>()>();

        $stack39 = loc.<index.ProgramLocation: soot.SootMethod sootMethod>;

        $stack40 = virtualinvoke $stack39.<soot.SootMethod: java.lang.String toString()>();

        $stack41 = virtualinvoke $stack37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack40);

        $stack42 = virtualinvoke $stack41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack43 = loc.<index.ProgramLocation: int lineNumber>;

        $stack44 = virtualinvoke $stack42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack43);

        $stack45 = virtualinvoke $stack44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $stack46 = loc.<index.ProgramLocation: int unitId>;

        $stack47 = virtualinvoke $stack45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack46);

        $stack48 = virtualinvoke $stack47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $stack38.<java.io.PrintStream: void println(java.lang.String)>($stack48);

        goto label3;

     label4:
        goto label2;

     label5:
        goto label1;

     label6:
        return;
    }

    void testVirtualCallMap()
    {
        analyzer.analysis.GlobalCallGraphAnalysisTest this;
        java.util.LinkedList $stack3;
        java.util.Map $stack4;
        java.util.Collection $stack5;
        java.util.function.Function $stack6;
        java.util.Comparator $stack7;
        java.util.HashSet $stack8;
        java.io.PrintStream $stack9;
        java.lang.String $stack10;

        this := @this: analyzer.analysis.GlobalCallGraphAnalysisTest;

        $stack3 = new java.util.LinkedList;

        $stack4 = <analyzer.analysis.GlobalCallGraphAnalysisTest: java.util.Map classes>;

        $stack5 = interfaceinvoke $stack4.<java.util.Map: java.util.Collection values()>();

        specialinvoke $stack3.<java.util.LinkedList: void <init>(java.util.Collection)>($stack5);

        $stack6 = dynamicinvoke "apply" <java.util.function.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_VIRTUAL" <soot.SootClass: java.lang.String getName()>, methodtype: java.lang.String __METHODTYPE__(soot.SootClass));

        $stack7 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>($stack6);

        interfaceinvoke $stack3.<java.util.List: void sort(java.util.Comparator)>($stack7);

        $stack8 = new java.util.HashSet;

        specialinvoke $stack8.<java.util.HashSet: void <init>(java.util.Collection)>($stack3);

        $stack9 = <java.lang.System: java.io.PrintStream out>;

        $stack10 = virtualinvoke $stack8.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $stack9.<java.io.PrintStream: void println(java.lang.String)>($stack10);

        return;
    }
}
