class analyzer.analysis.GlobalCallGraphAnalysisTest extends analyzer.AnalyzerTestBase
{
    private static final org.slf4j.Logger LOG;
    public static analyzer.analysis.GlobalCallGraphAnalysis callGraphAnalysis;

    void <init>()
    {
        analyzer.analysis.GlobalCallGraphAnalysisTest this;

        this := @this: analyzer.analysis.GlobalCallGraphAnalysisTest;

        specialinvoke this.<analyzer.AnalyzerTestBase: void <init>()>();

        return;
    }

    public static void makingCallGraphAnalysis()
    {
        org.slf4j.Logger $stack1;
        java.util.LinkedList $stack2;
        java.util.Map $stack3;
        java.util.Collection $stack4;
        java.util.function.Function $stack5;
        java.util.Comparator $stack6;
        analyzer.analysis.GlobalCallGraphAnalysis $stack7;

        $stack1 = <analyzer.analysis.GlobalCallGraphAnalysisTest: org.slf4j.Logger LOG>;

        interfaceinvoke $stack1.<org.slf4j.Logger: void info(java.lang.String)>("ClassGraphAnalysis.....");

        $stack2 = new java.util.LinkedList;

        $stack3 = <analyzer.analysis.GlobalCallGraphAnalysisTest: java.util.Map classes>;

        $stack4 = interfaceinvoke $stack3.<java.util.Map: java.util.Collection values()>();

        specialinvoke $stack2.<java.util.LinkedList: void <init>(java.util.Collection)>($stack4);

        $stack5 = dynamicinvoke "apply" <java.util.function.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(methodtype: java.lang.Object __METHODTYPE__(java.lang.Object), methodhandle: "REF_INVOKE_VIRTUAL" <soot.SootClass: java.lang.String getName()>, methodtype: java.lang.String __METHODTYPE__(soot.SootClass));

        $stack6 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>($stack5);

        interfaceinvoke $stack2.<java.util.List: void sort(java.util.Comparator)>($stack6);

        $stack7 = new analyzer.analysis.GlobalCallGraphAnalysis;

        specialinvoke $stack7.<analyzer.analysis.GlobalCallGraphAnalysis: void <init>(java.util.List)>($stack2);

        <analyzer.analysis.GlobalCallGraphAnalysisTest: analyzer.analysis.GlobalCallGraphAnalysis callGraphAnalysis> = $stack7;

        return;
    }

    void testVirtualCallMap()
    {
        analyzer.analysis.GlobalCallGraphAnalysisTest this;
        soot.SootClass personInterface, parentSuperClass, $stack23, $stack34, $stack45;
        soot.SootMethod dispInInterface, dispSuperClass, $stack24, $stack35, $stack46;
        java.lang.Class $stack5, $stack10, $stack18, $stack29, $stack40;
        java.util.Map $stack6, $stack11, $stack16, $stack20, $stack27, $stack31, $stack38, $stack42;
        java.lang.String $stack7, $stack12, $stack21, $stack32, $stack43;
        java.lang.Object $stack8, $stack13, $stack17, $stack22, $stack28, $stack33, $stack39, $stack44;
        analyzer.analysis.GlobalCallGraphAnalysis $stack15, $stack26, $stack37;
        java.util.Set $stack19, $stack30, $stack41;
        boolean $stack25, $stack36, $stack47;

        this := @this: analyzer.analysis.GlobalCallGraphAnalysisTest;

        $stack6 = <analyzer.analysis.GlobalCallGraphAnalysisTest: java.util.Map classes>;

        $stack5 = class "Lanalyzer/cases/callGraphAnalysis/Person;";

        $stack7 = virtualinvoke $stack5.<java.lang.Class: java.lang.String getName()>();

        $stack8 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack7);

        personInterface = (soot.SootClass) $stack8;

        dispInInterface = virtualinvoke personInterface.<soot.SootClass: soot.SootMethod getMethod(java.lang.String)>("void disp()");

        $stack11 = <analyzer.analysis.GlobalCallGraphAnalysisTest: java.util.Map classes>;

        $stack10 = class "Lanalyzer/cases/callGraphAnalysis/ParentClass;";

        $stack12 = virtualinvoke $stack10.<java.lang.Class: java.lang.String getName()>();

        $stack13 = interfaceinvoke $stack11.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack12);

        parentSuperClass = (soot.SootClass) $stack13;

        dispSuperClass = virtualinvoke parentSuperClass.<soot.SootClass: soot.SootMethod getMethod(java.lang.String)>("void disp()");

        $stack15 = <analyzer.analysis.GlobalCallGraphAnalysisTest: analyzer.analysis.GlobalCallGraphAnalysis callGraphAnalysis>;

        $stack16 = $stack15.<analyzer.analysis.GlobalCallGraphAnalysis: java.util.Map virtualCalls>;

        $stack17 = interfaceinvoke $stack16.<java.util.Map: java.lang.Object get(java.lang.Object)>(dispInInterface);

        $stack19 = (java.util.Set) $stack17;

        $stack20 = <analyzer.analysis.GlobalCallGraphAnalysisTest: java.util.Map classes>;

        $stack18 = class "Lanalyzer/cases/callGraphAnalysis/ParentClass;";

        $stack21 = virtualinvoke $stack18.<java.lang.Class: java.lang.String getName()>();

        $stack22 = interfaceinvoke $stack20.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack21);

        $stack23 = (soot.SootClass) $stack22;

        $stack24 = virtualinvoke $stack23.<soot.SootClass: soot.SootMethod getMethod(java.lang.String)>("void disp()");

        $stack25 = interfaceinvoke $stack19.<java.util.Set: boolean contains(java.lang.Object)>($stack24);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack25);

        $stack26 = <analyzer.analysis.GlobalCallGraphAnalysisTest: analyzer.analysis.GlobalCallGraphAnalysis callGraphAnalysis>;

        $stack27 = $stack26.<analyzer.analysis.GlobalCallGraphAnalysis: java.util.Map virtualCalls>;

        $stack28 = interfaceinvoke $stack27.<java.util.Map: java.lang.Object get(java.lang.Object)>(dispInInterface);

        $stack30 = (java.util.Set) $stack28;

        $stack31 = <analyzer.analysis.GlobalCallGraphAnalysisTest: java.util.Map classes>;

        $stack29 = class "Lanalyzer/cases/callGraphAnalysis/ChildClass;";

        $stack32 = virtualinvoke $stack29.<java.lang.Class: java.lang.String getName()>();

        $stack33 = interfaceinvoke $stack31.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack32);

        $stack34 = (soot.SootClass) $stack33;

        $stack35 = virtualinvoke $stack34.<soot.SootClass: soot.SootMethod getMethod(java.lang.String)>("void disp()");

        $stack36 = interfaceinvoke $stack30.<java.util.Set: boolean contains(java.lang.Object)>($stack35);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack36);

        $stack37 = <analyzer.analysis.GlobalCallGraphAnalysisTest: analyzer.analysis.GlobalCallGraphAnalysis callGraphAnalysis>;

        $stack38 = $stack37.<analyzer.analysis.GlobalCallGraphAnalysis: java.util.Map virtualCalls>;

        $stack39 = interfaceinvoke $stack38.<java.util.Map: java.lang.Object get(java.lang.Object)>(dispSuperClass);

        $stack41 = (java.util.Set) $stack39;

        $stack42 = <analyzer.analysis.GlobalCallGraphAnalysisTest: java.util.Map classes>;

        $stack40 = class "Lanalyzer/cases/callGraphAnalysis/ChildClass;";

        $stack43 = virtualinvoke $stack40.<java.lang.Class: java.lang.String getName()>();

        $stack44 = interfaceinvoke $stack42.<java.util.Map: java.lang.Object get(java.lang.Object)>($stack43);

        $stack45 = (soot.SootClass) $stack44;

        $stack46 = virtualinvoke $stack45.<soot.SootClass: soot.SootMethod getMethod(java.lang.String)>("void disp()");

        $stack47 = interfaceinvoke $stack41.<java.util.Set: boolean contains(java.lang.Object)>($stack46);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack47);

        return;
    }

    void testBackwordCallMap()
    {
        analyzer.analysis.GlobalCallGraphAnalysisTest this;

        this := @this: analyzer.analysis.GlobalCallGraphAnalysisTest;

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>(1);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $stack0;

        $stack0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lanalyzer/analysis/GlobalCallGraphAnalysisTest;");

        <analyzer.analysis.GlobalCallGraphAnalysisTest: org.slf4j.Logger LOG> = $stack0;

        return;
    }
}
