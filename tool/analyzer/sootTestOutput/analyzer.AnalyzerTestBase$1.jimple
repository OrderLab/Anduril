final class analyzer.AnalyzerTestBase$1 extends analyzer.AnalyzerMain
{

    void <init>(analyzer.option.AnalyzerOptions)
    {
        analyzer.AnalyzerTestBase$1 this;
        analyzer.option.AnalyzerOptions x0;

        this := @this: analyzer.AnalyzerTestBase$1;

        x0 := @parameter0: analyzer.option.AnalyzerOptions;

        specialinvoke this.<analyzer.AnalyzerMain: void <init>(analyzer.option.AnalyzerOptions)>(x0);

        return;
    }

    protected void registerAnalyses()
    {
        analyzer.AnalyzerTestBase$1 this;
        analyzer.phase.PhaseManager $stack1;
        analyzer.phase.PhaseInfo $stack3;
        analyzer.TestHelper tmp$1641528161;
        soot.Transformer tmp$365016387;

        this := @this: analyzer.AnalyzerTestBase$1;

        $stack1 = staticinvoke <analyzer.phase.PhaseManager: analyzer.phase.PhaseManager getInstance()>();

        tmp$1641528161 = new analyzer.TestHelper;

        specialinvoke tmp$1641528161.<analyzer.TestHelper: void <init>()>();

        $stack3 = <analyzer.TestHelper: analyzer.phase.PhaseInfo PHASE_INFO>;

        tmp$365016387 = (soot.Transformer) tmp$1641528161;

        virtualinvoke $stack1.<analyzer.phase.PhaseManager: soot.Transform registerAnalysis(soot.Transformer,analyzer.phase.PhaseInfo)>(tmp$365016387, $stack3);

        return;
    }
}
