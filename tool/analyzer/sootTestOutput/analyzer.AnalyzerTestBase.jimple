public class analyzer.AnalyzerTestBase extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    protected static analyzer.AnalyzerMain analyzer;
    protected static analyzer.TestHelper helper;
    public static java.util.Map classes;
    public static java.util.Map index;
    public static java.util.Map methodUnitIds;
    public static java.util.Map logEntries;

    public void <init>()
    {
        analyzer.AnalyzerTestBase this;

        this := @this: analyzer.AnalyzerTestBase;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setup() throws java.lang.Exception
    {
        analyzer.option.AnalyzerOptions options;
        java.util.Iterator l5, l9, l14, l17;
        soot.SootClass sootClass, $stack98;
        java.lang.String shortClassName, name, l22, $stack30, $stack43, $stack51, $stack55, $stack58, $stack63, $stack64;
        soot.SootMethod sootMethod, log;
        soot.Unit unit;
        soot.ValueBox valueBox;
        soot.Value value;
        org.slf4j.Logger $stack24;
        analyzer.TestHelper $stack25, $stack26, $stack57;
        java.lang.String[] $stack27;
        analyzer.phase.PhaseInfo $stack28, $stack32, $stack42;
        analyzer.phase.PhaseManager $stack31, $stack37, $stack40;
        analyzer.option.OptionParser $stack33;
        analyzer.AnalyzerTestBase$1 $stack35;
        boolean $stack36, $stack44, $stack45, $stack49, $stack52, $stack70, $stack72, $stack82, $stack90, $stack94, $stack100, $stack103, $stack109, $stack110, $stack111, $stack112;
        java.util.Set $stack38, $stack41;
        int $stack39, $stack65, $stack66, $stack102, $stack106, id;
        soot.Scene $stack46;
        soot.util.Chain $stack47;
        java.lang.Object $stack50, $stack71, $stack83, $stack92;
        java.util.Map $stack54, $stack61, $stack77, $stack105;
        java.util.HashMap $stack60, $stack74, $stack76;
        java.util.List $stack68, $stack88;
        soot.Body $stack79;
        soot.UnitPatchingChain $stack80;
        index.ProgramLocation $stack84;
        java.lang.Integer $stack86;
        soot.jimple.InvokeExpr $stack96;
        index.IndexManager$LogEntry $stack104;
        byte l23;

        $stack24 = <analyzer.AnalyzerTestBase: org.slf4j.Logger LOG>;

        interfaceinvoke $stack24.<org.slf4j.Logger: void info(java.lang.String)>("AnalyzerTestBase setup");

        $stack25 = <analyzer.AnalyzerTestBase: analyzer.TestHelper helper>;

        if $stack25 == null goto label01;

        return;

     label01:
        $stack26 = new analyzer.TestHelper;

        specialinvoke $stack26.<analyzer.TestHelper: void <init>()>();

        <analyzer.AnalyzerTestBase: analyzer.TestHelper helper> = $stack26;

        $stack27 = newarray (java.lang.String)[10];

        $stack27[0] = "-o";

        $stack27[1] = "sootTestOutput";

        $stack27[2] = "-i";

        $stack27[3] = "target/test-classes";

        $stack27[4] = "-a";

        $stack28 = <analyzer.TestHelper: analyzer.phase.PhaseInfo PHASE_INFO>;

        $stack30 = virtualinvoke $stack28.<analyzer.phase.PhaseInfo: java.lang.String getFullName()>();

        $stack27[5] = $stack30;

        $stack27[6] = "-w";

        $stack27[7] = "-p";

        $stack27[8] = "jb";

        $stack27[9] = "use-original-names:true";

        $stack31 = staticinvoke <analyzer.phase.PhaseManager: analyzer.phase.PhaseManager getInstance()>();

        $stack32 = <analyzer.TestHelper: analyzer.phase.PhaseInfo PHASE_INFO>;

        virtualinvoke $stack31.<analyzer.phase.PhaseManager: void addPhaseInfo(analyzer.phase.PhaseInfo)>($stack32);

        $stack33 = new analyzer.option.OptionParser;

        specialinvoke $stack33.<analyzer.option.OptionParser: void <init>()>();

        options = virtualinvoke $stack33.<analyzer.option.OptionParser: analyzer.option.AnalyzerOptions parse(java.lang.String[])>($stack27);

        $stack35 = new analyzer.AnalyzerTestBase$1;

        specialinvoke $stack35.<analyzer.AnalyzerTestBase$1: void <init>(analyzer.option.AnalyzerOptions)>(options);

        $stack36 = virtualinvoke $stack35.<analyzer.AnalyzerMain: boolean initialize()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack36);

        $stack37 = staticinvoke <analyzer.phase.PhaseManager: analyzer.phase.PhaseManager getInstance()>();

        $stack38 = virtualinvoke $stack37.<analyzer.phase.PhaseManager: java.util.Set enabledAnalyses()>();

        $stack39 = interfaceinvoke $stack38.<java.util.Set: int size()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertEquals(int,int)>($stack39, 1);

        $stack40 = staticinvoke <analyzer.phase.PhaseManager: analyzer.phase.PhaseManager getInstance()>();

        $stack41 = virtualinvoke $stack40.<analyzer.phase.PhaseManager: java.util.Set enabledAnalyses()>();

        $stack42 = <analyzer.TestHelper: analyzer.phase.PhaseInfo PHASE_INFO>;

        $stack43 = virtualinvoke $stack42.<analyzer.phase.PhaseInfo: java.lang.String getFullName()>();

        $stack44 = interfaceinvoke $stack41.<java.util.Set: boolean contains(java.lang.Object)>($stack43);

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack44);

        $stack45 = virtualinvoke $stack35.<analyzer.AnalyzerMain: boolean run()>();

        staticinvoke <org.junit.jupiter.api.Assertions: void assertTrue(boolean)>($stack45);

        $stack46 = staticinvoke <soot.Scene: soot.Scene v()>();

        $stack47 = virtualinvoke $stack46.<soot.Scene: soot.util.Chain getApplicationClasses()>();

        l5 = interfaceinvoke $stack47.<soot.util.Chain: java.util.Iterator iterator()>();

     label02:
        $stack49 = interfaceinvoke l5.<java.util.Iterator: boolean hasNext()>();

        if $stack49 == 0 goto label17;

        $stack50 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>();

        sootClass = (soot.SootClass) $stack50;

        $stack51 = virtualinvoke sootClass.<soot.SootClass: java.lang.String getName()>();

        $stack52 = virtualinvoke $stack51.<java.lang.String: boolean startsWith(java.lang.String)>("analyzer.cases.");

        if $stack52 == 0 goto label16;

        $stack54 = <analyzer.AnalyzerTestBase: java.util.Map classes>;

        $stack55 = virtualinvoke sootClass.<soot.SootClass: java.lang.String getName()>();

        interfaceinvoke $stack54.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack55, sootClass);

        $stack57 = <analyzer.AnalyzerTestBase: analyzer.TestHelper helper>;

        $stack58 = virtualinvoke sootClass.<soot.SootClass: java.lang.String getName()>();

        virtualinvoke $stack57.<analyzer.TestHelper: soot.SootClass loadSootClassMethods(java.lang.String)>($stack58);

        $stack60 = new java.util.HashMap;

        specialinvoke $stack60.<java.util.HashMap: void <init>()>();

        $stack61 = <analyzer.AnalyzerTestBase: java.util.Map index>;

        interfaceinvoke $stack61.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(sootClass, $stack60);

        $stack63 = virtualinvoke sootClass.<soot.SootClass: java.lang.String getName()>();

        $stack64 = virtualinvoke sootClass.<soot.SootClass: java.lang.String getName()>();

        $stack65 = virtualinvoke $stack64.<java.lang.String: int lastIndexOf(int)>(46);

        $stack66 = $stack65 + 1;

        shortClassName = virtualinvoke $stack63.<java.lang.String: java.lang.String substring(int)>($stack66);

        $stack68 = virtualinvoke sootClass.<soot.SootClass: java.util.List getMethods()>();

        l9 = interfaceinvoke $stack68.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $stack70 = interfaceinvoke l9.<java.util.Iterator: boolean hasNext()>();

        if $stack70 == 0 goto label16;

        $stack71 = interfaceinvoke l9.<java.util.Iterator: java.lang.Object next()>();

        sootMethod = (soot.SootMethod) $stack71;

        $stack72 = virtualinvoke sootMethod.<soot.SootMethod: boolean hasActiveBody()>();

        if $stack72 == 0 goto label15;

        $stack74 = new java.util.HashMap;

        specialinvoke $stack74.<java.util.HashMap: void <init>()>();

        interfaceinvoke $stack60.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(sootMethod, $stack74);

        $stack76 = new java.util.HashMap;

        specialinvoke $stack76.<java.util.HashMap: void <init>()>();

        $stack77 = <analyzer.AnalyzerTestBase: java.util.Map methodUnitIds>;

        interfaceinvoke $stack77.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(sootMethod, $stack76);

        id = 0;

        $stack79 = virtualinvoke sootMethod.<soot.SootMethod: soot.Body getActiveBody()>();

        $stack80 = virtualinvoke $stack79.<soot.Body: soot.UnitPatchingChain getUnits()>();

        l14 = virtualinvoke $stack80.<soot.UnitPatchingChain: java.util.Iterator iterator()>();

     label04:
        $stack82 = interfaceinvoke l14.<java.util.Iterator: boolean hasNext()>();

        if $stack82 == 0 goto label15;

        $stack83 = interfaceinvoke l14.<java.util.Iterator: java.lang.Object next()>();

        unit = (soot.Unit) $stack83;

        $stack84 = new index.ProgramLocation;

        specialinvoke $stack84.<index.ProgramLocation: void <init>(soot.SootClass,soot.SootMethod,soot.Unit,int)>(sootClass, sootMethod, unit, id);

        interfaceinvoke $stack74.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(unit, $stack84);

        $stack86 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(id);

        interfaceinvoke $stack76.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack86, unit);

        id = id + 1;

        $stack88 = interfaceinvoke unit.<soot.Unit: java.util.List getUseBoxes()>();

        l17 = interfaceinvoke $stack88.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $stack90 = interfaceinvoke l17.<java.util.Iterator: boolean hasNext()>();

        if $stack90 == 0 goto label14;

        $stack92 = interfaceinvoke l17.<java.util.Iterator: java.lang.Object next()>();

        valueBox = (soot.ValueBox) $stack92;

        value = interfaceinvoke valueBox.<soot.ValueBox: soot.Value getValue()>();

        $stack94 = value instanceof soot.jimple.InvokeExpr;

        if $stack94 == 0 goto label13;

        $stack96 = (soot.jimple.InvokeExpr) value;

        log = interfaceinvoke $stack96.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

        $stack98 = virtualinvoke log.<soot.SootMethod: soot.SootClass getDeclaringClass()>();

        name = virtualinvoke $stack98.<soot.SootClass: java.lang.String getName()>();

        $stack100 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("org.apache.commons.logging.Log");

        if $stack100 != 0 goto label06;

        $stack112 = virtualinvoke name.<java.lang.String: boolean equals(java.lang.Object)>("org.slf4j.Logger");

        if $stack112 == 0 goto label13;

     label06:
        l22 = virtualinvoke log.<soot.SootMethod: java.lang.String getName()>();

        l23 = -1;

        $stack102 = virtualinvoke l22.<java.lang.String: int hashCode()>();

        lookupswitch($stack102)
        {
            case 3237038: goto label08;
            case 3641990: goto label09;
            case 95458899: goto label10;
            case 96784904: goto label07;
            default: goto label11;
        };

     label07:
        $stack103 = virtualinvoke l22.<java.lang.String: boolean equals(java.lang.Object)>("error");

        if $stack103 == 0 goto label11;

        l23 = 0;

        goto label11;

     label08:
        $stack111 = virtualinvoke l22.<java.lang.String: boolean equals(java.lang.Object)>("info");

        if $stack111 == 0 goto label11;

        l23 = 1;

        goto label11;

     label09:
        $stack110 = virtualinvoke l22.<java.lang.String: boolean equals(java.lang.Object)>("warn");

        if $stack110 == 0 goto label11;

        l23 = 2;

        goto label11;

     label10:
        $stack109 = virtualinvoke l22.<java.lang.String: boolean equals(java.lang.Object)>("debug");

        if $stack109 == 0 goto label11;

        l23 = 3;

     label11:
        tableswitch(l23)
        {
            case 0: goto label12;
            case 1: goto label12;
            case 2: goto label12;
            case 3: goto label12;
            default: goto label13;
        };

     label12:
        $stack105 = <analyzer.AnalyzerTestBase: java.util.Map logEntries>;

        $stack104 = new index.IndexManager$LogEntry;

        $stack106 = staticinvoke <analyzer.AnalyzerTestBase: int getLine(soot.Unit)>(unit);

        specialinvoke $stack104.<index.IndexManager$LogEntry: void <init>(java.lang.String,int)>(shortClassName, $stack106);

        interfaceinvoke $stack105.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack104, $stack84);

     label13:
        goto label05;

     label14:
        goto label04;

     label15:
        goto label03;

     label16:
        goto label02;

     label17:
        return;
    }

    private static int getLine(soot.Unit)
    {
        soot.Unit unit;
        soot.tagkit.LineNumberTag tag;
        soot.tagkit.Tag $stack2;
        int $stack3;

        unit := @parameter0: soot.Unit;

        $stack2 = interfaceinvoke unit.<soot.Unit: soot.tagkit.Tag getTag(java.lang.String)>("LineNumberTag");

        tag = (soot.tagkit.LineNumberTag) $stack2;

        if tag == null goto label1;

        $stack3 = virtualinvoke tag.<soot.tagkit.LineNumberTag: int getLineNumber()>();

        return $stack3;

     label1:
        return -1;
    }

    public static void teardown()
    {
        org.slf4j.Logger $stack0;

        $stack0 = <analyzer.AnalyzerTestBase: org.slf4j.Logger LOG>;

        interfaceinvoke $stack0.<org.slf4j.Logger: void info(java.lang.String)>("GrayAnalyzerTestBase teardown");

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $stack0;
        java.util.TreeMap $stack1;
        java.util.HashMap $stack2, $stack3, $stack4;

        $stack0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lanalyzer/AnalyzerTestBase;");

        <analyzer.AnalyzerTestBase: org.slf4j.Logger LOG> = $stack0;

        $stack1 = new java.util.TreeMap;

        specialinvoke $stack1.<java.util.TreeMap: void <init>()>();

        <analyzer.AnalyzerTestBase: java.util.Map classes> = $stack1;

        $stack2 = new java.util.HashMap;

        specialinvoke $stack2.<java.util.HashMap: void <init>()>();

        <analyzer.AnalyzerTestBase: java.util.Map index> = $stack2;

        $stack3 = new java.util.HashMap;

        specialinvoke $stack3.<java.util.HashMap: void <init>()>();

        <analyzer.AnalyzerTestBase: java.util.Map methodUnitIds> = $stack3;

        $stack4 = new java.util.HashMap;

        specialinvoke $stack4.<java.util.HashMap: void <init>()>();

        <analyzer.AnalyzerTestBase: java.util.Map logEntries> = $stack4;

        return;
    }
}
